using System.Collections.Generic;
using MySql.Data.MySqlClient;
using System.Windows.Forms;
using System.Data;
using System;
using System.Security.Cryptography;
using System.Text;

namespace FeedBackSystem
{

    class MySql
    {

        private readonly MySqlConnection _connection;

        public MySql()
        {
            const string server = "localhost"; 
            const string database = "feedbacksystem";
            const string user = "root";
            const string password = "1234";

            const string connectionString = "SERVER=" + server + ";" + "DATABASE=" + database + ";" + "UID=" + user + ";" + "PASSWORD=" + password + ";";

            _connection = new MySqlConnection(connectionString);
        }

        public bool OpenConnection()
        {
            try
            {
                _connection.Open();
                return true;
            }
            catch (MySqlException e)
            {
                switch (e.Number)
                {
                    case 0:
                        MessageBox.Show(@"Cannot connect to server. Make sure MySQL is running.");
                        break;
                    case 1045:
                        MessageBox.Show(@"Invalid username/password.");
                        break;
                    default:
                        MessageBox.Show(e.Message);
                        break;
                }
                return false;
            }
        }

        public bool CloseConnection()
        {
            try
            {
                _connection.Close();
                _connection.Dispose();
                return true;
            }
            catch (MySqlException e)
            {
                MessageBox.Show(e.Message);
                return false;
            }
        }

        public MySqlConnection GetConnection()
        {
            return _connection;
        }

        public List<Applicant> GetApplicants()
        {

            List<Applicant> listOfApp = new List<Applicant>();

            MySqlCommand cmd = new MySqlCommand("SELECT FirstName, LastName, Email, positionapplied.File FROM feedbacksystem.applicant, feedbacksystem.positionapplied where applicant.ApplicantID = positionapplied.ApplicantID", _connection);
            MySqlDataReader reader = cmd.ExecuteReader();

            while (reader.Read())
            {
                
                
                byte[] pdf = (byte[])reader["File"];
                Applicant app = new Applicant(reader["FirstName"] + " " + reader["LastName"], reader["Email"] + "", pdf);
                listOfApp.Add(app);
                
            }
            return listOfApp;
        }

        // Get the data set generated by the sqlStatement
        public DataTable getDataSet(string sqlStatement)
        {
            DataTable dataTable = new DataTable();

            try
            {
                MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection);
                _connection.Open();

                using(MySqlDataAdapter da = new MySqlDataAdapter(cmd))
                {
                    da.Fill(dataTable);
                }
            }
            catch (Exception genExp)
            {
                MessageBox.Show(genExp.Message);
            }

            //return the dataTable
            return dataTable;
        }

        public bool saveHeader(Header header)
        {
            string headTitle = header.Title;
            string headDesc = header.Desc;
            List<HeaderItem> itemValues = header.HeaderItems;
            
            _connection.Open();

            using (MySqlTransaction trans = _connection.BeginTransaction())
            {
                try
                {
                    string sqlStatement;
                    List<int> itemsID = new List<int>();
                    int headID;

                    MySqlDataReader reader;

                    sqlStatement = "INSERT INTO header(`Name`,`Desc`) VALUES (@headTitle,@headDesc); SELECT last_insert_id() as id;";
                    using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                    {
                        cmd.Parameters.AddWithValue("@headTitle", headTitle);
                        cmd.Parameters.AddWithValue("@headDesc", headDesc);
                        reader = cmd.ExecuteReader();
                        reader.Read();
                        headID = Convert.ToInt16(reader["id"]);
                        reader.Close();
                        cmd.Parameters.Clear();
                    }

                    foreach (HeaderItem item in itemValues)
                    {
                        int currentItemID;
                        sqlStatement = "INSERT INTO headeritem(Title, InputType) VALUES (@itemTitle,@itemInputType); SELECT last_insert_id() as id;";
                        using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                        {
                            cmd.Parameters.AddWithValue("@itemTitle", item.Title);
                            cmd.Parameters.AddWithValue("@itemInputType", item.InputType);
                            reader = cmd.ExecuteReader();
                            //int id = Convert.ToInt16(cmd.ExecuteScalar().ToString());
                            reader.Read();
                            currentItemID = Convert.ToInt16(reader["id"]);
                            itemsID.Add(currentItemID);
                            reader.Close();
                            cmd.Parameters.Clear();
                        }

                        if (item.InputType.Equals("Query"))
                        {
                            sqlStatement = "INSERT INTO headeritemlist(HeaderItemId, List) VALUES (@currentItemID,@itemQueryStat);";
                            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                            {
                                cmd.Parameters.AddWithValue("@currentItemID", currentItemID);
                                cmd.Parameters.AddWithValue("@itemQueryStat", item.QueryStat);
                                reader = cmd.ExecuteReader();
                                reader.Close();
                                cmd.Parameters.Clear();
                            }
                        }
                        else
                        {
                            foreach (string value in item.ValueItem)
                            {
                                sqlStatement = "INSERT INTO headeritemlist(HeaderItemId, List) VALUES (@currentItemID,@value); ";
                                using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                                {
                                    cmd.Parameters.AddWithValue("@currentItemID", currentItemID);
                                    cmd.Parameters.AddWithValue("@value", value);
                                    reader = cmd.ExecuteReader();
                                    reader.Close();
                                    cmd.Parameters.Clear();
                                }
                            }
                        }
                    }

                    foreach (int itemids in itemsID)
                    {
                        sqlStatement = "INSERT INTO headercontains(HeaderID,HeaderItemID) VALUES (@headID,@itemID);";
                        using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                        {
                            cmd.Parameters.AddWithValue("@headID", headID);
                            cmd.Parameters.AddWithValue("@itemID", itemids);
                            reader = cmd.ExecuteReader();
                            reader.Close();
                            cmd.Parameters.Clear();
                        }
                    }

                    trans.Commit();
                    _connection.Close();
                }
                catch (Exception genExp)
                {
                    MessageBox.Show(genExp.Message);
                    trans.Rollback();
                    return false;
                }
            } //end transaction

            return true;
        }

        public Boolean VerifyPassword(string username, string password)
        {
            SHA256 sha256 = SHA256Managed.Create();

            string sqlStatement = "SELECT concat(TRIM(FirstName),\".\",TRIM(LastName)) as username, reviewer.Password, Salt FROM feedbacksystem.reviewer where concat(TRIM(FirstName),\".\",TRIM(LastName)) like @Username";
            _connection.Open();

            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
            {
                cmd.Parameters.AddWithValue("@Username", username);
                MySqlDataReader reader = cmd.ExecuteReader();
                
                if (reader.Read())
                {
                    byte[] bytes = Encoding.UTF8.GetBytes(password+reader["Salt"]);
                    byte[] hash = sha256.ComputeHash(bytes);
                    string convertedHash = Convert.ToBase64String(hash);
            
                    if (convertedHash.Equals(reader["Password"]))
                    {
                        _connection.Close();
                        return true;
                    }
                    else
                    {
                        _connection.Close();
                        return false;
                    }
                }
                else
                {
                    _connection.Close();
                    return false;
                }

            }

        }
    }
}
