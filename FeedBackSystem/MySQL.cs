using System.Collections.Generic;
using MySql.Data.MySqlClient;
using System.Windows.Forms;
using System.Data;
using System;

namespace FeedBackSystem
{

    class MySql
    {

        private readonly MySqlConnection _connection;

        public MySql()
        {
            const string server = "localhost"; 
            const string database = "feedbacksystem";
            const string user = "root";
            const string password = "1234";

            const string connectionString = "SERVER=" + server + ";" + "DATABASE=" + database + ";" + "UID=" + user + ";" + "PASSWORD=" + password + ";";

            _connection = new MySqlConnection(connectionString);
        }

        public bool OpenConnection()
        {
            try
            {
                _connection.Open();
                return true;
            }
            catch (MySqlException e)
            {
                switch (e.Number)
                {
                    case 0:
                        MessageBox.Show(@"Cannot connect to server. Make sure MySQL is running.");
                        break;
                    case 1045:
                        MessageBox.Show(@"Invalid username/password.");
                        break;
                    default:
                        MessageBox.Show(e.Message);
                        break;
                }
                return false;
            }
        }

        public bool CloseConnection()
        {
            try
            {
                _connection.Close();
                _connection.Dispose();
                return true;
            }
            catch (MySqlException e)
            {
                MessageBox.Show(e.Message);
                return false;
            }
        }

        public MySqlConnection GetConnection()
        {
            return _connection;
        }

        public List<Applicant> GetApplicants()
        {

            List<Applicant> listOfApp = new List<Applicant>();

            MySqlCommand cmd = new MySqlCommand("SELECT FirstName, LastName, Email, positionapplied.File FROM feedbacksystem.applicant, feedbacksystem.positionapplied where applicant.ApplicantID = positionapplied.ApplicantID", _connection);
            MySqlDataReader reader = cmd.ExecuteReader();

            while (reader.Read())
            {
                
                
                byte[] pdf = (byte[])reader["File"];
                Applicant app = new Applicant(reader["FirstName"] + " " + reader["LastName"], reader["Email"] + "", pdf);
                listOfApp.Add(app);
                
            }
            return listOfApp;
        }

        // Get the data set generated by the sqlStatement
        public DataTable getDataSet(string sqlStatement)
        {
            DataTable dataTable = new DataTable();

            try
            {
                MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection);
                _connection.Open();

                using(MySqlDataAdapter da = new MySqlDataAdapter(cmd))
                {
                    da.Fill(dataTable);
                }
            }
            catch (Exception genExp)
            {
                MessageBox.Show(genExp.Message);
            }

            //return the dataTable
            return dataTable;
        }

        public bool saveHeader(Header header)
        {
            string headTitle = header.Title;
            string headDesc = header.Desc;
            List<HeaderItem> itemValues = header.HeaderItems;

            try
            {
                string sqlStatement;
                MySqlCommand cmd;
                List<int> ints = new List<int>();
                int headID;

                _connection.Open();
                MySqlDataReader reader;

                sqlStatement = "INSERT INTO header(`Name`,`Desc`) VALUES ('" + headTitle + "','" + headDesc + "'); SELECT last_insert_id() as id;";
                cmd = new MySqlCommand(sqlStatement, _connection);
                reader = cmd.ExecuteReader();
                reader.Read();
                headID = Convert.ToInt16(reader["id"]);
                reader.Close();
                
                foreach (HeaderItem item in itemValues)
                {
                    sqlStatement = "INSERT INTO headeritem(Title, InputType) VALUES ('" + item.Title + "','" + item.InputType + "'); SELECT last_insert_id() as id;";
                    cmd = new MySqlCommand(sqlStatement, _connection);
                    //int id = Convert.ToInt16(cmd.ExecuteScalar().ToString());
                    reader = cmd.ExecuteReader();
                    reader.Read();
                    int id = Convert.ToInt16(reader["id"]);
                    ints.Add(id);
                    reader.Close();

                    if (item.InputType.Equals("Query"))
                    {
                        sqlStatement = "INSERT INTO headeritemlist(HeaderItemId, List) VALUES ('" + id + "','" + item.QueryStat + "');";
                        cmd = new MySqlCommand(sqlStatement, _connection);
                        reader = cmd.ExecuteReader();
                        reader.Close();
                    } else { 
                        foreach (string value in item.ValueItem)
                        {
                        
                            sqlStatement = "INSERT INTO headeritemlist(HeaderItemId, List) VALUES ('" + id + "','" + value + "');";
                            cmd = new MySqlCommand(sqlStatement, _connection);
                            reader = cmd.ExecuteReader();
                            reader.Close();
                        }
                    }
                }

                foreach(int itemids in ints)
                {
                    sqlStatement = "INSERT INTO headercontains(HeaderID,HeaderItemID) VALUES ('" + headID + "','" + itemids + "');";
                    cmd = new MySqlCommand(sqlStatement, _connection);
                    reader = cmd.ExecuteReader();
                    reader.Close();
                }

                _connection.Close();
            }
            catch (Exception genExp)
            {
                MessageBox.Show(genExp.Message);
                return false;
            }

            return true;
        }

    }
}
