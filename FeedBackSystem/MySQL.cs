using System.Collections.Generic;
using System.Collections.Generic;
using MySql.Data.MySqlClient;
using System.Windows.Forms;
using System.Data;
using System;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;

namespace FeedBackSystem
{

    class MySql
    {

        private readonly MySqlConnection _connection;

        public MySql()
        {
            const string server = "localhost";
            const string database = "feedbacksystem";
            const string user = "root";
            const string password = "1234";

            const string connectionString =
                "SERVER=" + server + ";" + "DATABASE=" + database + ";" + "UID=" + user + ";" + "PASSWORD=" + password +
                ";";

            _connection = new MySqlConnection(connectionString);
        }

        public bool OpenConnection()
        {
            try
            {
                _connection.Open();
                return true;
            }
            catch (MySqlException e)
            {
                switch (e.Number)
                {
                    case 0:
                        MessageBox.Show(@"Cannot connect to server. Make sure MySQL is running.");
                        break;
                    case 1045:
                        MessageBox.Show(@"Invalid username/password.");
                        break;
                    default:
                        MessageBox.Show(e.Message);
                        break;
                }
                return false;
            }
        }

        public bool CloseConnection()
        {
            try
            {
                _connection.Close();
                _connection.Dispose();
                return true;
            }
            catch (MySqlException e)
            {
                MessageBox.Show(e.Message);
                return false;
            }
        }

        public MySqlConnection GetConnection()
        {
            return _connection;
        }

        public List<Applicant> GetApplicants()
        {

            List<Applicant> listOfApp = new List<Applicant>();

            MySqlCommand cmd =
                new MySqlCommand(
                    "SELECT applicant.ApplicantID,FirstName, LastName, Email, positionapplied.File,applicationtype.Name,Timestamp FROM feedbacksystem.applicant, feedbacksystem.positionapplied, feedbacksystem.applicationtype where applicant.ApplicantID = positionapplied.ApplicantID and positionapplied.ApplicationTypeID = applicationtype.ApplicationTypeID",
                    _connection);
            MySqlDataReader reader = cmd.ExecuteReader();

            while (reader.Read())
            {
                Applicant app;
                //Check whether is the File column not null else it will throw InvalidCast
                if (!Convert.IsDBNull(reader["File"]))
                {
                    byte[] pdf = (byte[]) reader["File"];
                    app = new Applicant(reader["ApplicantID"].ToString(),
                        reader["FirstName"] + " " + reader["LastName"],
                        reader["Email"] + "",
                        pdf,
                        reader["Name"].ToString(),
                        reader["StatusTitle"].ToString(),
                        reader["Timestamp"].ToString());
                }
                else
                {
                    app = new Applicant(reader["ApplicantID"].ToString(),
                        reader["FirstName"] + " " + reader["LastName"],
                        reader["Email"] + "",
                        null,
                        reader["Name"].ToString(),
                        reader["StatusTitle"].ToString(),
                        reader["Timestamp"].ToString());
                }
                listOfApp.Add(app);

            }
            reader.Close();
            return listOfApp;
        }

        public List<Position> GetPositions()
        {
            List<Position> positions = new List<Position>();

            MySqlCommand cmd =
                new MySqlCommand(
                    "SELECT * FROM feedbacksystem.positions",
                    _connection);
            MySqlDataReader reader = cmd.ExecuteReader();

            while (reader.Read())
            {
                positions.Add(new Position(reader["PositionID"].ToString(), reader["Name"].ToString(),
                    reader["Desc"].ToString(), reader["Department"].ToString(), reader["MinQualification"].ToString()));

            }
            reader.Close();

            return positions;
        }

        // Get the data set generated by the sqlStatement
        public DataTable GetDataSet(string sqlStatement)
        {
            DataTable dataTable = new DataTable();

            try
            {
                MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection);

                using (MySqlDataAdapter da = new MySqlDataAdapter(cmd))
                {
                    da.Fill(dataTable);
                }
            }
            catch (Exception genExp)
            {
                MessageBox.Show(genExp.Message);
            }

            //return the dataTable
            return dataTable;
        }

        //Get datatable from cmd ( use if want to avoid sql injection )
        public DataTable GetDataSetCmd(MySqlCommand cmd)
        {
            DataTable dataTable = new DataTable();
            cmd.Connection = _connection;
            try
            {

                using (MySqlDataAdapter da = new MySqlDataAdapter(cmd))
                {
                    da.Fill(dataTable);
                }
            }
            catch (Exception genExp)
            {
                MessageBox.Show(genExp.Message);
            }

            //return the dataTable
            return dataTable;
        }

        //Get header item list
        public List<string> GetHeaderList(string headerItemId)
        {
            List<string> list = new List<string>();
            DataTable dataTable = new DataTable();
            string sqlStatement =
                "SELECT headeritemlist.List FROM feedbacksystem.headeritemlist,feedbacksystem.headeritem " +
                "where headeritemlist.HeaderItemID = headeritem.HeaderItemID and headeritem.HeaderItemID = @HeaderItemID";

            try
            {

                MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection);
                cmd.Parameters.AddWithValue("@HeaderItemID", headerItemId);


                using (MySqlDataAdapter da = new MySqlDataAdapter(cmd))
                {
                    da.Fill(dataTable);
                }

                foreach (DataRow row in dataTable.Rows)
                {
                    list.Add(row["List"].ToString());
                }
            }
            catch (Exception genExp)
            {
                MessageBox.Show(genExp.Message);
            }

            //return the list
            return list;
        }

        public List<Section> GetSectionsList()
        {
            List<Section> sectionList = new List<Section>();
            DataTable dataTable = new DataTable();

            string sqlStatement = "SELECT * FROM feedbacksystem.sections";

            try
            {
                using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
                {
                    using (MySqlDataAdapter da = new MySqlDataAdapter(cmd))
                    {
                        da.Fill(dataTable);
                    }

                    foreach (DataRow row in dataTable.Rows)
                    {
                        sectionList.Add(new Section(row["SectionID"].ToString(), row["Title"].ToString(),
                            row["Desc"].ToString()));
                    }
                }

                foreach (Section section in sectionList)
                {
                    List<String> codes = getSectionCodes(section.SectionId);
                    section.Codes = codes;
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }


            return sectionList;
        }

        public Section GetSection(string id)
        {
            List<Section> sectionList = new List<Section>();
            Section section = new Section();
            DataTable dataTable = new DataTable();

            string sqlStatement = "SELECT * FROM feedbacksystem.sections where SectionID = @ID";

            try
            {
                using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
                {
                    cmd.Parameters.AddWithValue("@ID", id);

                    MySqlDataReader reader = cmd.ExecuteReader();

                    if (reader.Read())
                    {
                        section = new Section(reader["SectionID"].ToString(), reader["Title"].ToString(),
                            reader["Desc"].ToString());
                    }

                    reader.Close();
                }

                section.Codes = getSectionCodes(section.SectionId);

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }

            return section;

        }

        public List<string> getSectionCodes(string sectionId)
        {
            List<string> codes = new List<string>();

            MySqlCommand cmd =
                new MySqlCommand(
                    "SELECT codes.Code FROM sections,section_code,codes where sections.SectionID = section_code.SectionID and section_code.CodesID = codes.CodesID and sections.SectionID = @SectionID",
                    _connection);

            cmd.Parameters.AddWithValue("@SectionID", sectionId);
            MySqlDataReader reader = cmd.ExecuteReader();

            while (reader.Read())
            {
                codes.Add(reader["Code"].ToString());
            }
            reader.Close();

            return codes;
        }

        public Header GetHeader(string id)
        {
            string sqlStatement = "SELECT * FROM feedbacksystem.header where HeaderID = @HeaderID";
            Header header = new Header();

            try
            {
                MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection);
                cmd.Parameters.AddWithValue("@HeaderID", id);


                MySqlDataReader reader = cmd.ExecuteReader();

                reader.Read();

                header.Title = reader["Name"].ToString();
                header.HeaderId = reader["HeaderID"].ToString();
                header.Desc = reader["Desc"].ToString();
                reader.Close();

            }
            catch (Exception genExp)
            {
                MessageBox.Show(genExp.ToString());
            }

            return header;
        }

        public List<HeaderItem> GetHeaderItems(string headerId)
        {
            DataTable dataTable = new DataTable();
            List<HeaderItem> headerItem = new List<HeaderItem>();
            string sqlStatement =
                "SELECT Header.HeaderID,headeritem.HeaderItemID,Title,InputType FROM feedbacksystem.headeritem,feedbacksystem.headercontains," +
                "feedbacksystem.header where headeritem.HeaderItemID = headercontains.HeaderItemID and " +
                "headercontains.HeaderID = header.HeaderID and header.HeaderID = @HeaderID  order by PositionIndex asc";

            try
            {
                MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection);
                cmd.Parameters.AddWithValue("@HeaderID", headerId);

                using (MySqlDataAdapter da = new MySqlDataAdapter(cmd))
                {
                    da.Fill(dataTable);
                }

                //each header item
                foreach (DataRow row in dataTable.Rows)
                {
                    List<string> list = GetHeaderList(row["HeaderItemID"].ToString());
                    headerItem.Add(new HeaderItem(row["HeaderItemID"].ToString(), row["Title"].ToString(),
                        row["InputType"].ToString(), list));
                }
            }
            catch (Exception genExp)
            {
                MessageBox.Show(genExp.Message);
            }

            //return the HeaderItemList
            return headerItem;
        }

        public bool SaveHeader(Header header)
        {
            string headTitle = header.Title;
            string headDesc = header.Desc;
            List<HeaderItem> itemValues = header.HeaderItems;
            bool success = true;

            using (MySqlTransaction trans = _connection.BeginTransaction())
            {
                try
                {
                    string sqlStatement;
                    List<int> itemsId = new List<int>();
                    int headId;

                    MySqlDataReader reader;

                    sqlStatement =
                        "INSERT INTO header(`Name`,`Desc`) VALUES (@headTitle,@headDesc); SELECT last_insert_id() as id;";
                    using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                    {
                        cmd.Parameters.AddWithValue("@headTitle", headTitle);
                        cmd.Parameters.AddWithValue("@headDesc", headDesc);
                        reader = cmd.ExecuteReader();
                        reader.Read();
                        headId = Convert.ToInt16(reader["id"]);
                        reader.Close();
                        cmd.Parameters.Clear();
                    }

                    foreach (HeaderItem item in itemValues)
                    {
                        int currentItemId = -1;
                        var duplicateItem = false;

                        //check whether there is same header item (by name)
                        sqlStatement =
                            "SELECT HeaderItemID as id FROM headeritem WHERE Title = @itemTitle";
                        using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                        {
                            cmd.Parameters.AddWithValue("@itemTitle", item.Title);
                            reader = cmd.ExecuteReader();
                            if (reader.HasRows)
                            {
                                reader.Read();
                                currentItemId = Convert.ToInt16(reader["id"]);
                                itemsId.Add(currentItemId);
                                duplicateItem = true;
                            }
                            reader.Close();
                            cmd.Parameters.Clear();
                        }

                        if (duplicateItem)
                        {
                            if (!item.InputType.Equals("Query"))
                            {
                                var confirmResult = MessageBox.Show("This item, \"" + item.Title + "\" is duplicated!" +
                                                                    "\nClick Yes to save another copy, No to edit",
                                    "Are you sure?",
                                    MessageBoxButtons.YesNo);

                                if (confirmResult != DialogResult.Yes)
                                {
                                    return false;
                                }
                                else
                                {
                                    duplicateItem = false;
                                    itemsId.Remove(currentItemId);
                                }
                            }
                        }

                        if (!duplicateItem)
                        {
                            sqlStatement =
                                "INSERT INTO headeritem(Title, InputType) VALUES (@itemTitle,@itemInputType); SELECT last_insert_id() as id;";
                            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                            {
                                cmd.Parameters.AddWithValue("@itemTitle", item.Title);
                                cmd.Parameters.AddWithValue("@itemInputType", item.InputType);
                                reader = cmd.ExecuteReader();
                                //int id = Convert.ToInt16(cmd.ExecuteScalar().ToString());
                                reader.Read();
                                currentItemId = Convert.ToInt16(reader["id"]);
                                itemsId.Add(currentItemId);
                                reader.Close();
                                cmd.Parameters.Clear();
                            }

                            foreach (string value in item.ValueItem)
                            {
                                sqlStatement =
                                    "INSERT INTO headeritemlist(HeaderItemId, List) VALUES (@currentItemID,@value); ";
                                using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                                {
                                    cmd.Parameters.AddWithValue("@currentItemID", currentItemId);
                                    cmd.Parameters.AddWithValue("@value", value);
                                    reader = cmd.ExecuteReader();
                                    reader.Close();
                                    cmd.Parameters.Clear();
                                }
                            }
                        } //end if no duplicate 
                    } //end for each items

                    int position = 0;

                    foreach (int itemids in itemsId)
                    {
                        sqlStatement =
                            "INSERT INTO headercontains(HeaderID,HeaderItemID,PositionIndex) VALUES (@headID,@itemID,@positionIndex);";
                        using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                        {
                            cmd.Parameters.AddWithValue("@headID", headId);
                            cmd.Parameters.AddWithValue("@itemID", itemids);
                            cmd.Parameters.AddWithValue("@positionIndex", position);
                            reader = cmd.ExecuteReader();
                            reader.Close();
                            cmd.Parameters.Clear();
                        }
                        position++;
                    } //end for each header to item

                    trans.Commit();
                }
                catch (Exception genExp)
                {
                    trans.Rollback();
                    MessageBox.Show(genExp.ToString());
                    success = false;
                }
            } //end transaction

            return success;
        }

        public bool VerifyPassword(string username, string password)
        {
            SHA256 sha256 = SHA256.Create();

            string sqlStatement =
                "SELECT concat(TRIM(FirstName),\".\",TRIM(LastName)) as username, reviewer.Password, Salt, ReviewerID,AdminAccess FROM feedbacksystem.reviewer where concat(TRIM(FirstName),\".\",TRIM(LastName))  like @Username and Archived = '0'";

            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
            {
                cmd.Parameters.AddWithValue("@Username", username);
                MySqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read())
                {

                    byte[] bytes = Encoding.UTF8.GetBytes(password + reader["Salt"]);
                    byte[] hash = sha256.ComputeHash(bytes);
                    string convertedHash = Convert.ToBase64String(hash);

                    if (convertedHash.Equals(reader["Password"]))
                    {
                        Reviewer.Id = Convert.ToInt32(reader["ReviewerID"]);
                        Reviewer.Name = reader["username"].ToString().Replace(".", " ");
                        Reviewer.IsAdmin = (bool) reader["AdminAccess"];
                        reader.Close();
                        return true;
                    }
                    else
                    {
                        reader.Close();
                        return false;
                    }
                }
                else
                {
                    reader.Close();
                    return false;
                }

            }

        }

        public bool SaveSection(Section section)
        {
            int codeId = 0;


            using (MySqlTransaction trans = _connection.BeginTransaction())
            {
                try
                {
                    //Insert the section
                    string sqlStatement =
                        "INSERT INTO sections(`Title`, `Desc`) VALUES (@Title,@Desc); SELECT last_insert_id() as id;";
                    MySqlDataReader reader;

                    int sectionId;
                    using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                    {
                        cmd.Parameters.AddWithValue("@Title", section.Title);
                        cmd.Parameters.AddWithValue("@Desc", section.Desc);
                        reader = cmd.ExecuteReader();
                        reader.Read();
                        sectionId = Convert.ToInt16(reader["id"]);
                        reader.Close();
                        cmd.Parameters.Clear();
                    }



                    //loop codes
                    foreach (var code in section.Codes)
                    {
                        bool duplicate = false;
                        //check codes duplication
                        sqlStatement = "SELECT codes.CodesID as id FROM feedbacksystem.codes where codes.Code = @code;";
                        using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                        {
                            cmd.Parameters.AddWithValue("@code", code);
                            reader = cmd.ExecuteReader();

                            if (reader.HasRows)
                            {
                                reader.Read();
                                codeId = Convert.ToInt16(reader["id"]);
                                duplicate = true;
                            }
                            reader.Close();
                            cmd.Parameters.Clear();
                        }

                        //create a new entry if not duplication
                        if (!duplicate)
                        {
                            sqlStatement = "INSERT INTO codes(`Code`) VALUES (@Code); SELECT last_insert_id() as id;";
                            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                            {
                                cmd.Parameters.AddWithValue("@Code", code);
                                reader = cmd.ExecuteReader();

                                if (reader.HasRows)
                                {
                                    reader.Read();
                                    codeId = Convert.ToInt16(reader["id"]);
                                }
                                reader.Close();
                                cmd.Parameters.Clear();
                            }
                        }

                        //Link section with codes
                        sqlStatement = "INSERT INTO section_code VALUES(@CodeID, @SectionID);";
                        using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                        {
                            cmd.Parameters.AddWithValue("@CodeID", codeId);
                            cmd.Parameters.AddWithValue("@SectionID", sectionId);
                            reader = cmd.ExecuteReader();
                            reader.Close();
                            cmd.Parameters.Clear();
                        }

                    } //end loop codes
                    trans.Commit();
                }
                catch (Exception ex)
                {
                    trans.Rollback();
                    MessageBox.Show(ex.Message);
                    return false;
                }

            }
            return true;
        }

        public List<Applicant> GetAppByPosition(String posId)
        {
            List<Applicant> listOfApp = new List<Applicant>();

            //this command will sort according to the timestamp -> get the distinct row using applicantID -> first row
            MySqlCommand cmd =
                new MySqlCommand(
                    "SELECT * FROM " +
                    "(SELECT applicant.ApplicantID, FirstName, LastName, Email, positionapplied.Timestamp, " +
                    "positionapplied.File, applicationtype.Name, applicationstatus.StatusTitle " +
                    "FROM feedbacksystem.applicant, feedbacksystem.positionapplied, " +
                    "feedbacksystem.positions, feedbacksystem.applicationtype, feedbacksystem.applicationstatus " +
                    "WHERE applicant.ApplicantID = positionapplied.ApplicantID " +
                    "AND positionapplied.PositionID = positions.PositionID " +
                    "AND positions.PositionID = @PositionID " +
                    "AND applicationtype.ApplicationTypeID = positionapplied.ApplicantTypeID " +
                    "AND applicationstatus.StatusID = positionapplied.StatusID " +
                    "ORDER BY positionapplied.timestamp DESC) t " +
                    "GROUP BY ApplicantID; ",
                    _connection);
            /*new MySqlCommand(
                "SELECT applicant.ApplicantID,FirstName, LastName, Email, positionapplied.File,applicationtype.Name FROM feedbacksystem.applicant, feedbacksystem.positionapplied,feedbacksystem.positions,feedbacksystem.applicationtype " +
                "where applicant.ApplicantID = positionapplied.ApplicantID and positionapplied.PositionID = positions.PositionID and positions.PositionID = @PositionID and applicationtype.ApplicationTypeID = positionapplied.ApplicantTypeID " + 
                "ORDER BY positionapplied.timestamp DESC",
                _connection);*/

            cmd.Parameters.AddWithValue("@PositionID", posId);
            MySqlDataReader reader = cmd.ExecuteReader();

            while (reader.Read())
            {
                Applicant app;
                //Check whether is the File column not null else it will throw InvalidCast
                if (!Convert.IsDBNull(reader["File"]))
                {
                    byte[] pdf = (byte[]) reader["File"];
                    app = new Applicant(reader["ApplicantID"].ToString(),
                        reader["FirstName"] + " " + reader["LastName"],
                        reader["Email"] + "",
                        pdf,
                        reader["Name"].ToString(),
                        reader["StatusTitle"].ToString(),
                        reader["Timestamp"].ToString());
                }
                else
                {
                    app = new Applicant(reader["ApplicantID"].ToString(),
                        reader["FirstName"] + " " + reader["LastName"],
                        reader["Email"] + "",
                        null,
                        reader["Name"].ToString(),
                        reader["StatusTitle"].ToString(),
                        reader["Timestamp"].ToString());
                }

                listOfApp.Add(app);

            }
            reader.Close();
            return listOfApp;
        }

        public bool SaveFeedback(Feedback feedback)
        {
            using (MySqlTransaction trans = _connection.BeginTransaction())
            {
                try
                {
                    string sqlStatement = "";
                    MySqlDataReader reader;
                    int feedbackId;

                    //Generate PDF Path
                    byte[] pdfBytes = PDFGeneration.Generate(feedback);
                    

                    // Insert the feedback
                    sqlStatement =
                        "INSERT INTO feedback(`AppID`, `ReviewID`, `PositionID`,`HeaderID`,`PDF`) VALUES (@AppID,@ReviewID,@PositionID,@HeaderID,@PDF); SELECT last_insert_id() as id;";
                    using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                    {
                        cmd.Parameters.AddWithValue("@AppID", feedback.Applicant.Id);
                        cmd.Parameters.AddWithValue("@ReviewID", feedback.ReviewerId);
                        cmd.Parameters.AddWithValue("@PositionID", feedback.Position._positionId);
                        cmd.Parameters.AddWithValue("@HeaderID", feedback.Header.HeaderId);
                        cmd.Parameters.AddWithValue("@PDF", pdfBytes);
                        reader = cmd.ExecuteReader();
                        reader.Read();
                        feedbackId = Convert.ToInt16(reader["id"]);
                        reader.Close();
                        cmd.Parameters.Clear();
                    }

                    //loop header items
                    foreach (HeaderItem item in feedback.Header.HeaderItems)
                    {
                        //Link feedback with header items
                        sqlStatement =
                            "INSERT INTO feedbackheader(`FeedbackID`,`HeaderIID`,`Input`) VALUES (@FeedbackID,@HeaderItemID,@Input);";
                        using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                        {
                            cmd.Parameters.AddWithValue("@FeedbackID", feedbackId);
                            cmd.Parameters.AddWithValue("@HeaderItemID", item.Id);
                            cmd.Parameters.AddWithValue("@Input", item.ValueChosen);
                            reader = cmd.ExecuteReader();
                            reader.Close();
                            cmd.Parameters.Clear();
                        }

                    } //end loop header item

                    //loop sections
                    foreach (Section sec in feedback.Sections)
                    {
                        //Link feedback with sections
                        sqlStatement =
                            "INSERT INTO feedbacksection(`FeedbackID`,`SectionID`,`Comment`,`CodeGiven`,IsChecked) VALUES (@FeedbackID,@SectionID,@Comment,@Code,@Checked);";
                        using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                        {
                            cmd.Parameters.AddWithValue("@FeedbackID", feedbackId);
                            cmd.Parameters.AddWithValue("@SectionID", sec.SectionId);
                            cmd.Parameters.AddWithValue("@Comment", sec.Comment);
                            cmd.Parameters.AddWithValue("@Code", sec.CodeChosen);
                            cmd.Parameters.AddWithValue("@Checked", sec.IsChecked);
                            reader = cmd.ExecuteReader();
                            reader.Close();
                            cmd.Parameters.Clear();
                        }

                    } //end loop sections

                    trans.Commit();
                }
                catch (Exception ex)
                {
                    trans.Rollback();
                    MessageBox.Show(ex.Message);
                    return false;
                }

            }
            return true;
        }

        public bool UpdateFeedback(Feedback feedback)
        {
            //update assuming they cannot change the header and sections
            using (MySqlTransaction trans = _connection.BeginTransaction())
            {
                try
                {
                    string sqlStatement = "";
                    MySqlDataReader reader;
                    int feedbackId = Convert.ToInt16(feedback.FeedbackID);
                    
                    // update the feedback on reviewer
                    sqlStatement =
                        "UPDATE feedback SET `ReviewID` = @ReviewID WHERE FeedbackID = @FeedbackID;";
                    using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                    {
                        cmd.Parameters.AddWithValue("@ReviewID", feedback.ReviewerId);
                        cmd.Parameters.AddWithValue("@FeedbackID", feedbackId);
                        reader = cmd.ExecuteReader();
                        reader.Close();
                        cmd.Parameters.Clear();
                    }

                    // update header items
                    foreach (HeaderItem item in feedback.Header.HeaderItems)
                    {
                        sqlStatement =
                            "UPDATE feedbackheader SET `Input` = @Input WHERE FeedbackID = @FeedbackID AND HeaderIID = @HeaderItemID;";
                        using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                        {
                            cmd.Parameters.AddWithValue("@FeedbackID", feedbackId);
                            cmd.Parameters.AddWithValue("@HeaderItemID", item.Id);
                            cmd.Parameters.AddWithValue("@Input", item.ValueChosen);
                            reader = cmd.ExecuteReader();
                            reader.Close();
                            cmd.Parameters.Clear();
                        }

                    } //end loop header item

                    // update sections
                    foreach (Section sec in feedback.Sections)
                    {
                        sqlStatement =
                            "UPDATE feedbacksection SET `Comment` = @Comment, `CodeGiven` = @Code,`IsChecked` = @Checked WHERE FeedbackID = @FeedbackID AND SectionID = @SectionID;";
                        using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                        {
                            cmd.Parameters.AddWithValue("@FeedbackID", feedbackId);
                            cmd.Parameters.AddWithValue("@SectionID", sec.SectionId);
                            cmd.Parameters.AddWithValue("@Comment", sec.Comment);
                            cmd.Parameters.AddWithValue("@Code", sec.CodeChosen);
                            cmd.Parameters.AddWithValue("@Checked", sec.IsChecked);
                            reader = cmd.ExecuteReader();
                            reader.Close();
                            cmd.Parameters.Clear();
                        }
                    }

                    trans.Commit();
                }
                catch (Exception ex)
                {
                    trans.Rollback();
                    MessageBox.Show(ex.Message);
                    return false;
                }

            }
            return true;
        }

        public bool SaveTemplate(Header header, List<Section> sections, string title, string desc)
        {
            using (MySqlTransaction trans = _connection.BeginTransaction())
            {
                try
                {
                    //Insert the template
                    string sqlStatement =
                        "INSERT INTO template(`HeaderID`, `TemplateTitle`, `TemplateDesc`, `TemplateAuthor`) VALUES (@HeaderID,@Title,@Desc,@Author); SELECT last_insert_id() as id;";
                    MySqlDataReader reader;

                    int templateId;

                    using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                    {
                        cmd.Parameters.AddWithValue("@HeaderID", header.HeaderId);
                        cmd.Parameters.AddWithValue("@Title", title);
                        cmd.Parameters.AddWithValue("@Desc", desc);
                        cmd.Parameters.AddWithValue("@Author", Reviewer.Id);
                        reader = cmd.ExecuteReader();
                        reader.Read();
                        templateId = Convert.ToInt16(reader["id"]);
                        reader.Close();
                        cmd.Parameters.Clear();
                    }

                    //loop section
                    foreach (Section s in sections)
                    {
                        //Link template with sections
                        sqlStatement =
                            "INSERT INTO template_section(`TemplateID`,`SectionID`) VALUES (@TemplateID,@SectionID);";
                        using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                        {
                            cmd.Parameters.AddWithValue("@TemplateID", templateId);
                            cmd.Parameters.AddWithValue("@SectionID", s.SectionId);
                            reader = cmd.ExecuteReader();
                            reader.Close();
                            cmd.Parameters.Clear();
                        }

                    } //end loop section

                    trans.Commit();
                }
                catch (Exception ex)
                {
                    trans.Rollback();
                    MessageBox.Show(ex.Message);
                    return false;
                }

            }
            return true;
        }

        public bool UpdateTemplate(Header header, List<Section> sections, string title, string desc, string id)
        {
            using (MySqlTransaction trans = _connection.BeginTransaction())
            {
                try
                {
                    //Update the template
                    string sqlStatement =
                        "UPDATE template SET `HeaderID` = @HeaderID, `TemplateTitle` = @Title, `TemplateDesc` = @Desc, `TemplateAuthor` = @Author WHERE TemplateID = @id";
                    MySqlDataReader reader;
                    
                    using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                    {
                        cmd.Parameters.AddWithValue("@HeaderID", header.HeaderId);
                        cmd.Parameters.AddWithValue("@Title", title);
                        cmd.Parameters.AddWithValue("@Desc", desc);
                        cmd.Parameters.AddWithValue("@Author", Reviewer.Id);
                        cmd.Parameters.AddWithValue("@id", id);
                        reader = cmd.ExecuteReader();
                        reader.Close();
                        cmd.Parameters.Clear();
                    }

                    // remove all sections linked to this template
                    sqlStatement =
                            "DELETE FROM template_section WHERE `TemplateID` = @TemplateID;";
                    using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                    {
                        cmd.Parameters.AddWithValue("@TemplateID", id);
                        reader = cmd.ExecuteReader();
                        reader.Close();
                        cmd.Parameters.Clear();
                    }

                    foreach (Section s in sections)
                    {
                        // link template with sections
                        sqlStatement =
                            "INSERT INTO template_section(`TemplateID`,`SectionID`) VALUES (@TemplateID,@SectionID);";
                        using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                        {
                            cmd.Parameters.AddWithValue("@TemplateID", id);
                            cmd.Parameters.AddWithValue("@SectionID", s.SectionId);
                            reader = cmd.ExecuteReader();
                            reader.Close();
                            cmd.Parameters.Clear();
                        }

                    } //end loop section

                    ////////////////////////end updates for template//////////////////////

                    List<string> affectedFIDs = new List<string>();
                    bool sameHeader = false;

                    //selecting all the affected feedbacks
                    sqlStatement =
                           "SELECT * FROM feedback WHERE `TemplateID` = @TemplateID;";
                    using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                    {
                        cmd.Parameters.AddWithValue("@TemplateID", id);
                        reader = cmd.ExecuteReader();
                        while(reader.Read())
                            affectedFIDs.Add(reader["FeedbackID"].ToString());
                        if (reader["HeaderID"].ToString().Equals(header.HeaderId))
                        {
                            sameHeader = true;
                        }
                        reader.Close();
                        cmd.Parameters.Clear();
                    }

                    //loop through all the affected feedbacks
                    foreach (string fid in affectedFIDs)
                    {
                        bool requireFeedbackUpdate = false;

                        if (!sameHeader)
                        {
                            //update the header field in the feedback
                            sqlStatement =
                                "UPDATE feedback SET `HeaderID` = @HeaderID WHERE FeedbackID = @id";

                            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                            {
                                cmd.Parameters.AddWithValue("@HeaderID", header.HeaderId);
                                cmd.Parameters.AddWithValue("@id", fid);
                                reader = cmd.ExecuteReader();
                                reader.Close();
                                cmd.Parameters.Clear();
                            }

                            //grab the list of header items id for this header
                            List<string> itemsID = new List<string>();
                            List<HeaderItem> headerItems = GetHeaderItems(header.HeaderId);
                            foreach (HeaderItem item in headerItems)
                            {
                                itemsID.Add(item.Id);
                            }
                            string headerItemsID = string.Join(",", itemsID);

                            //remove the header items in the feedback which are not part of this header
                            sqlStatement =
                                "DELETE FROM feedbackheader WHERE FeedbackID = @id AND HeaderIID NOT IN (" + headerItemsID + ");";

                            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                            {
                                cmd.Parameters.AddWithValue("@id", fid);
                                reader = cmd.ExecuteReader();
                                reader.Close();
                                cmd.Parameters.Clear();
                            }
                            
                            foreach(HeaderItem item in headerItems)
                            {
                                sqlStatement =
                                    "SELECT * FROM feedbackheader WHERE `FeedbackID` = @FeedbackID AND `HeaderIID` = @HeaderIID;";
                                using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                                {
                                    cmd.Parameters.AddWithValue("@FeedbackID", fid);
                                    cmd.Parameters.AddWithValue("@HeaderIID", item.Id);
                                    reader = cmd.ExecuteReader();
                                    if (reader.HasRows)
                                    {
                                        reader.Close();
                                        cmd.Parameters.Clear();
                                        continue;
                                    }
                                    else
                                    {
                                        reader.Close();
                                        cmd.Parameters.Clear();
                                        sqlStatement =
                                            "INSERT INTO feedbackheader(`FeedbackID`,`HeaderIID`) VALUES (@FeedbackID,@HeaderIID);";
                                        using (MySqlCommand cmd2 = new MySqlCommand(sqlStatement, _connection, trans))
                                        {
                                            cmd2.Parameters.AddWithValue("@FeedbackID", fid);
                                            cmd2.Parameters.AddWithValue("@HeaderIID", item.Id);
                                            reader = cmd2.ExecuteReader();
                                            reader.Close();
                                            cmd2.Parameters.Clear();
                                        }
                                        requireFeedbackUpdate = true;
                                    }

                                }
                            }
                        }//end if not same header

                        //update sections

                        List<string> sectionIDs = new List<string>();
                        foreach (Section section in sections)
                        {
                            sectionIDs.Add(section.SectionId);
                        }
                        string sectionIDstr = string.Join(",", sectionIDs);

                        //remove the sections in the feedback which are not part of this template
                        sqlStatement =
                            "DELETE FROM feedbacksection WHERE FeedbackID = @id AND SectionID NOT IN (" + sectionIDstr + ");";

                        using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                        {
                            cmd.Parameters.AddWithValue("@id", fid);
                            reader = cmd.ExecuteReader();
                            reader.Close();
                            cmd.Parameters.Clear();
                        }

                        foreach (Section item in sections)
                        {
                            sqlStatement =
                                "SELECT * FROM feedbacksection WHERE `FeedbackID` = @FeedbackID AND `SectionID` = @SectionID;";
                            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                            {
                                cmd.Parameters.AddWithValue("@FeedbackID", fid);
                                cmd.Parameters.AddWithValue("@SectionID", item.SectionId);
                                reader = cmd.ExecuteReader();
                                if (reader.HasRows)
                                {
                                    reader.Close();
                                    cmd.Parameters.Clear();
                                    continue;
                                }
                                else
                                {
                                    reader.Close();
                                    cmd.Parameters.Clear();
                                    sqlStatement =
                                        "INSERT INTO feedbacksection(`FeedbackID`,`SectionID`) VALUES (@FeedbackID,@SectionID);";
                                    using (MySqlCommand cmd2 = new MySqlCommand(sqlStatement, _connection, trans))
                                    {
                                        cmd2.Parameters.AddWithValue("@FeedbackID", fid);
                                        cmd2.Parameters.AddWithValue("@SectionID", item.SectionId);
                                        reader = cmd2.ExecuteReader();
                                        reader.Close();
                                        cmd2.Parameters.Clear();
                                    }
                                    requireFeedbackUpdate = true;
                                }

                            }
                        }

                        //update the feedback to incomplete
                        if (requireFeedbackUpdate)
                        {
                            sqlStatement = "UPDATE feedback SET IsComplete = @complete WHERE FeedbackID = @FeedbackID";
                            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
                            {
                                cmd.Parameters.AddWithValue("@complete", false);
                                cmd.Parameters.AddWithValue("@FeedbackID", id);
                                cmd.ExecuteNonQuery();
                            }

                        }
                    }//end foreach affected feedbacks

                    trans.Commit();
                }
                catch (Exception ex)
                {
                    trans.Rollback();
                    MessageBox.Show(ex.Message);
                    return false;
                }

            }
            return true;
        }

        public bool ArchiveHeader(string id)
        {
            string sqlStatement = "UPDATE header SET Archived=@Archive WHERE HeaderID=@ID";


            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
            {
                try
                {
                    cmd.Parameters.AddWithValue("@Archive", true);
                    cmd.Parameters.AddWithValue("@ID", id);

                    cmd.ExecuteNonQuery();

                    return true;
                }
                catch (Exception e)
                {
                    MessageBox.Show(e.Message);
                    return false;
                }
            }
        }

        public bool ArchiveUser(string id)
        {
            string sqlStatement = "UPDATE reviewer SET Archived=@Archive WHERE ReviewerID=@ID";


            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
            {
                try
                {
                    cmd.Parameters.AddWithValue("@Archive", true);
                    cmd.Parameters.AddWithValue("@ID", id);

                    cmd.ExecuteNonQuery();

                    return true;
                }
                catch (Exception e)
                {
                    MessageBox.Show(e.Message);
                    return false;
                }
            }
        }

        public bool ArchiveSection(string id)
        {
            string sqlStatement = "UPDATE sections SET Archived=@Archive WHERE SectionID=@ID";


            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
            {
                try
                {
                    cmd.Parameters.AddWithValue("@Archive", true);
                    cmd.Parameters.AddWithValue("@ID", id);

                    cmd.ExecuteNonQuery();

                    return true;
                }
                catch (Exception e)
                {
                    MessageBox.Show(e.Message);
                    return false;
                }
            }
        }

        public bool ArchiveTemplate(string id)
        {
            string sqlStatement = "UPDATE template SET Archived=@Archive WHERE TemplateID=@ID";


            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
            {
                try
                {
                    cmd.Parameters.AddWithValue("@Archive", true);
                    cmd.Parameters.AddWithValue("@ID", id);

                    cmd.ExecuteNonQuery();

                    return true;
                }
                catch (Exception e)
                {
                    MessageBox.Show(e.Message);
                    return false;
                }
            }
        }

        public bool AddUser(string fn, string ln, string password, bool isAdmin)
        {
            SHA256 sha256 = SHA256.Create();

            string salt = CreateSalt();

            byte[] bytes = Encoding.UTF8.GetBytes(password + salt);
            byte[] hash = sha256.ComputeHash(bytes);
            string HashedPassword = Convert.ToBase64String(hash);

            string sqlStatement =
                "insert into reviewer(FirstName,LastName,Password,Salt,AdminAccess) values (@FN,@LN,@Pass,@Salt,@Admin)";

            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
            {
                try
                {
                    cmd.Parameters.AddWithValue("@FN", fn);
                    cmd.Parameters.AddWithValue("@LN", ln);
                    cmd.Parameters.AddWithValue("@Pass", HashedPassword);
                    cmd.Parameters.AddWithValue("@Salt", salt);
                    cmd.Parameters.AddWithValue("@Admin", isAdmin);

                    cmd.ExecuteNonQuery();

                    return true;
                }
                catch (Exception e)
                {
                    MessageBox.Show(e.Message);
                    return false;
                }
            }


        }

        public bool EditUser(string id, string fn, string ln, bool isAdmin, string password)
        {
            SHA256 sha256 = SHA256.Create();

            string salt = CreateSalt();

            byte[] bytes = Encoding.UTF8.GetBytes(password + salt);
            byte[] hash = sha256.ComputeHash(bytes);
            string HashedPassword = Convert.ToBase64String(hash);

            string sqlStatement =
                "update reviewer set FirstName = @FN, LastName = @LN, Password = @Pass, Salt = @Salt, AdminAccess = @Admin where ReviewerID = @ID";

            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
            {
                try
                {
                    cmd.Parameters.AddWithValue("@FN", fn);
                    cmd.Parameters.AddWithValue("@LN", ln);
                    cmd.Parameters.AddWithValue("@Pass", HashedPassword);
                    cmd.Parameters.AddWithValue("@Salt", salt);
                    cmd.Parameters.AddWithValue("@Admin", isAdmin);
                    cmd.Parameters.AddWithValue("@ID", id);

                    cmd.ExecuteNonQuery();

                    return true;
                }
                catch (Exception e)
                {
                    MessageBox.Show(e.Message);
                    return false;
                }
            }


        }

        public bool EditUser(string id, string fn, string ln, bool isAdmin)
        {

            string sqlStatement =
                "update reviewer set FirstName = @FN, LastName = @LN, AdminAccess = @Admin where ReviewerID = @ID";

            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
            {
                try
                {
                    cmd.Parameters.AddWithValue("@FN", fn);
                    cmd.Parameters.AddWithValue("@LN", ln);
                    cmd.Parameters.AddWithValue("@Admin", isAdmin);
                    cmd.Parameters.AddWithValue("@ID", id);

                    cmd.ExecuteNonQuery();

                    return true;
                }
                catch (Exception e)
                {
                    MessageBox.Show(e.Message);
                    return false;
                }
            }


        }

        private static string CreateSalt()
        {
            //Generate a cryptographic random number.
            RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
            byte[] buff = new byte[256];
            rng.GetBytes(buff);

            // Return a Base64 string representation of the random number.
            return Convert.ToBase64String(buff);
        }

        public bool EditComponent(string type, string id, string title, string desc)
        {
            string tableID = "";
            string tableName = "";
            string tableTitle = "";
            string tableDesc = "";

            switch (type)
            {
                case "Header":
                    tableID = "HeaderID";
                    tableName = "header";
                    tableTitle = "Name";
                    tableDesc = "Desc";
                    break;
                case "Section":
                    tableID = "SectionID";
                    tableName = "sections";
                    tableTitle = "Title";
                    tableDesc = "Desc";
                    break;
                case "Template":
                    tableID = "TemplateID";
                    tableName = "template";
                    tableTitle = "TemplateTitle";
                    tableDesc = "TemplateDesc";
                    break;
                default:
                    return false;
            }

            string sqlStatement = "update " + tableName + " set `" + tableTitle + "` = @Title, `"
                                  + tableDesc + "` = @Desc where " + tableID + " = @ID";

            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
            {
                try
                {
                    cmd.Parameters.AddWithValue("@Title", title);
                    cmd.Parameters.AddWithValue("@Desc", desc);
                    cmd.Parameters.AddWithValue("@ID", id);

                    cmd.ExecuteNonQuery();

                    return true;
                }
                catch (Exception e)
                {
                    MessageBox.Show(e.Message);
                    return false;
                }
            }
        }


        public bool UpdateHeader(Header newHeader)
        {
            //Get the existing header from the database to compare with the new one
            Header oldHeader = GetHeader(newHeader.HeaderId);

            oldHeader.HeaderItems.Clear();

            foreach (HeaderItem i in GetHeaderItems(newHeader.HeaderId))
            {
                oldHeader.addHeaderItem(i);
            }

            //If Header title or description has been changed
            if (!oldHeader.Title.Equals(newHeader.Title) || !oldHeader.Desc.Equals(newHeader.Desc))
            {
                EditComponent("Header", oldHeader.HeaderId, newHeader.Title, newHeader.Desc);
            }

            using (MySqlTransaction trans = _connection.BeginTransaction())
            {
                try
                {
                    int position = 0;
                    List<string> feedbackIDs = new List<string>();


                    //Get feedback links
                    string sqlStatement = "SELECT * FROM feedbacksystem.feedback where HeaderID = @HeaderID";
                    using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
                    {

                        cmd.Parameters.AddWithValue("@HeaderID", newHeader.HeaderId);
                        MySqlDataReader reader = cmd.ExecuteReader();

                        while (reader.Read())
                        {
                            feedbackIDs.Add(reader["FeedbackID"].ToString());
                        }

                        reader.Close();
                    }


                    //Check if the header item has been deleted, if yes it would remove the link
                    foreach (HeaderItem i in oldHeader.HeaderItems)
                    {
                        HeaderItem it = newHeader.HeaderItems.Find(y => y.Id.Equals(i.Id));

                        if (it == null)
                        {
                            //remove header item link
                            sqlStatement =
                                "DELETE FROM headercontains WHERE HeaderID=@HeaderID and HeaderItemID = @HeaderItemID";

                            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
                            {

                                cmd.Parameters.AddWithValue("@HeaderID", newHeader.HeaderId);
                                cmd.Parameters.AddWithValue("@HeaderItemID", i.Id);
                                cmd.ExecuteNonQuery();
                            }

                            //Delete header item from feedback
                            foreach (string id in feedbackIDs)
                            {
                                sqlStatement =
                                    "DELETE FROM feedbackheader WHERE FeedbackID=@FeedbackID and HeaderIID = @HeaderItemID";

                                using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
                                {

                                    cmd.Parameters.AddWithValue("@FeedbackID", id);
                                    cmd.Parameters.AddWithValue("@HeaderItemID", i.Id);
                                    cmd.ExecuteNonQuery();
                                }
                            }

                            //Deletion doesn't require turning the feedback as incomplete as it only removes the item and doesn't require any extra input from user
                        }
                    }

                    //Goes through each header item
                    foreach (HeaderItem newitem in newHeader.HeaderItems)
                    {
                        //check if the header item exist
                        HeaderItem olditem = oldHeader.HeaderItems.Find(x => x.Id.Equals(newitem.Id));

                        //if exist
                        if (olditem != null)
                        {
                            //if any changes
                            if (!newitem.Title.Equals(olditem.Title) || !newitem.InputType.Equals(olditem.InputType) ||
                                !newitem.ValueItem.SequenceEqual(olditem.ValueItem))
                            {
                                //Update Header Item
                                sqlStatement =
                                    "UPDATE headeritem SET Title = @Title, InputType = @InputType WHERE  HeaderItemID = @HeaderItemID";

                                using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
                                {

                                    cmd.Parameters.AddWithValue("@Title", newitem.Title);
                                    cmd.Parameters.AddWithValue("@InputType", newitem.InputType);
                                    cmd.Parameters.AddWithValue("@HeaderItemID", newitem.Id);
                                    cmd.ExecuteNonQuery();
                                }

                                //Remove link between list and item

                                sqlStatement = "DELETE FROM headeritemlist WHERE HeaderItemID = @HeaderItemID;";

                                using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
                                {

                                    cmd.Parameters.AddWithValue("@HeaderItemID", newitem.Id);
                                    cmd.ExecuteNonQuery();
                                }

                                //Add Link between list and item
                                sqlStatement =
                                    "INSERT INTO headeritemlist (HeaderItemID, List) VALUES (@HeaderItemID, @List)";
                                foreach (string s in newitem.ValueItem)
                                {
                                    using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
                                    {

                                        cmd.Parameters.AddWithValue("@HeaderItemID", newitem.Id);
                                        cmd.Parameters.AddWithValue("@List", s);
                                        cmd.ExecuteNonQuery();
                                    }
                                }

                                //Set user input type to empty if there is any changes
                                sqlStatement =
                                    "UPDATE feedbackheader SET Input = @Input WHERE FeedbackID = @FeedbackID and HeaderIID = @HeaderItemID";
                                foreach (string id in feedbackIDs)
                                {
                                    using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
                                    {
                                        cmd.Parameters.AddWithValue("@Input", "");
                                        cmd.Parameters.AddWithValue("@FeedbackID", id);
                                        cmd.Parameters.AddWithValue("@HeaderIID", newitem.Id);
                                        cmd.ExecuteNonQuery();
                                    }
                                }

                                //set feedback as incomplete
                                sqlStatement =
                                    "UPDATE feedback SET isComplete = @complete WHERE FeedbackID = @FeedbackID";
                                foreach (string id in feedbackIDs)
                                {
                                    using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
                                    {

                                        cmd.Parameters.AddWithValue("@complete", false);
                                        cmd.Parameters.AddWithValue("@FeedbackID", id);
                                        cmd.ExecuteNonQuery();
                                    }
                                }
                            }
                        }
                        else
                        {
                            //Insert new Header Item
                            sqlStatement =
                                "INSERT INTO headeritem(Title, InputType) VALUES (@itemTitle,@itemInputType); SELECT last_insert_id() as id;";
                            MySqlDataReader reader;


                            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                            {
                                cmd.Parameters.AddWithValue("@itemTitle", newitem.Title);
                                cmd.Parameters.AddWithValue("@itemInputType", newitem.InputType);
                                reader = cmd.ExecuteReader();
                                reader.Read();
                                newitem.Id = reader["id"].ToString();
                                reader.Close();
                                cmd.Parameters.Clear();
                            }

                            foreach (string value in newitem.ValueItem)
                            {
                                sqlStatement =
                                    "INSERT INTO headeritemlist(HeaderItemId, List) VALUES (@currentItemID,@value)";
                                using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                                {
                                    cmd.Parameters.AddWithValue("@currentItemID", newitem.Id);
                                    cmd.Parameters.AddWithValue("@value", value);
                                    reader = cmd.ExecuteReader();
                                    reader.Close();
                                    cmd.Parameters.Clear();
                                }
                            }
                            //End Insert Header Item

                            //Link Header Item to Header
                            sqlStatement = "INSERT INTO headercontains(HeaderID,HeaderItemID) VALUES (@headID,@itemID)";
                            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                            {
                                cmd.Parameters.AddWithValue("@headID", newHeader.HeaderId);
                                cmd.Parameters.AddWithValue("@itemID", newitem.Id);
                                cmd.ExecuteNonQuery();
                                position++;
                            }

                            //Insert new Header Item into feedback
                            foreach (string id in feedbackIDs)
                            {
                                sqlStatement =
                                    "INSERT INTO feedbackheader(FeedbackID,HeaderIID) VALUES (@FeedbackID,@itemID)";
                                using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                                {
                                    cmd.Parameters.AddWithValue("@FeedbackID", id);
                                    cmd.Parameters.AddWithValue("@itemID", newitem.Id);
                                    cmd.ExecuteNonQuery();
                                }
                            }

                            //set feedback as incomplete
                            sqlStatement = "UPDATE feedback SET IsComplete = @complete WHERE FeedbackID = @FeedbackID";
                            foreach (string id in feedbackIDs)
                            {
                                using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
                                {

                                    cmd.Parameters.AddWithValue("@complete", false);
                                    cmd.Parameters.AddWithValue("@FeedbackID", id);
                                    cmd.ExecuteNonQuery();
                                }
                            }

                        }

                        //Update the Positions of the header item
                        string sql =
                            "UPDATE headercontains SET PositionIndex=@positionIndex  WHERE HeaderID=@HeaderID and HeaderItemID=@HeaderItemID";

                        using (MySqlCommand cmd = new MySqlCommand(sql, _connection))
                        {

                            cmd.Parameters.AddWithValue("@positionIndex", position);
                            cmd.Parameters.AddWithValue("@HeaderID", newHeader.HeaderId);
                            cmd.Parameters.AddWithValue("@HeaderItemID", newitem.Id);
                            cmd.ExecuteNonQuery();
                            position++;
                        }

                    } //end header item loop
                    trans.Commit();
                    return true;
                }
                catch (Exception ex)
                {
                    trans.Rollback();
                    MessageBox.Show(ex.Message);
                    return false;
                }
            }
        }

        public bool UpdateSection(Section newSection)
        {
            Section oldSection = GetSection(newSection.SectionId);

            if (!oldSection.Title.Equals(newSection.Title) || !oldSection.Desc.Equals(newSection.Desc))
            {
                EditComponent("Section", newSection.SectionId, newSection.Title, newSection.Desc);
            }

            using (MySqlTransaction trans = _connection.BeginTransaction())
            {
                string sqlStatement;
                List<string> FeedbackIDs = new List<string>();
                try
                {

                    sqlStatement = "DELETE FROM section_code WHERE SectionID = @SectionID";
                    using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
                    {
                        cmd.Parameters.AddWithValue("@SectionID", newSection.SectionId);
                        cmd.ExecuteNonQuery();
                    }

                    MySqlDataReader reader;
                    int codeId = -1;

                    foreach (var code in newSection.Codes)
                    {
                        bool duplicate = false;
                        //check codes duplication
                        sqlStatement = "SELECT codes.CodesID as id FROM feedbacksystem.codes where codes.Code = @code;";
                        using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                        {
                            cmd.Parameters.AddWithValue("@code", code);
                            reader = cmd.ExecuteReader();

                            if (reader.HasRows)
                            {
                                reader.Read();
                                codeId = Convert.ToInt16(reader["id"]);
                                duplicate = true;
                            }
                            reader.Close();
                            cmd.Parameters.Clear();
                        }

                        //create a new entry if not duplication
                        if (!duplicate)
                        {
                            sqlStatement = "INSERT INTO codes(`Code`) VALUES (@Code); SELECT last_insert_id() as id;";
                            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                            {
                                cmd.Parameters.AddWithValue("@Code", code);
                                reader = cmd.ExecuteReader();

                                if (reader.HasRows)
                                {
                                    reader.Read();
                                    codeId = Convert.ToInt16(reader["id"]);
                                }
                                reader.Close();
                                cmd.Parameters.Clear();
                            }
                        }

                        //Link section with codes
                        sqlStatement = "INSERT INTO section_code VALUES(@CodeID, @SectionID);";
                        using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                        {
                            cmd.Parameters.AddWithValue("@CodeID", codeId);
                            cmd.Parameters.AddWithValue("@SectionID", newSection.SectionId);
                            reader = cmd.ExecuteReader();
                            reader.Close();
                            cmd.Parameters.Clear();
                        }

                        //Empty code given of the feedback
                        sqlStatement = "UPDATE feedbacksection SET CodeGiven = @CodeGiven WHERE SectionID = @SectionID";
                        using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                        {
                            cmd.Parameters.AddWithValue("@CodeGiven", "");
                            cmd.Parameters.AddWithValue("@SectionID", newSection.SectionId);
                            reader = cmd.ExecuteReader();
                            reader.Close();
                            cmd.Parameters.Clear();
                        }

                        //get all the feedbackid that is associated with this section
                        sqlStatement = "SELECT distinct(FeedbackID) FROM feedbacksection";
                        using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                        {
                            reader = cmd.ExecuteReader();
                            while (reader.Read())
                            {
                                FeedbackIDs.Add(reader["FeedbackID"].ToString());
                            }
                            reader.Close();
                        }

                        //set feedback as incomplete
                        sqlStatement = "UPDATE feedback SET isComplete = @complete WHERE FeedbackID = @FeedbackID";
                        foreach (string id in FeedbackIDs)
                        {
                            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
                            {

                                cmd.Parameters.AddWithValue("@complete", false);
                                cmd.Parameters.AddWithValue("@FeedbackID", id);
                                cmd.ExecuteNonQuery();
                            }
                        }


                    } //end loop codes
                    trans.Commit();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                    trans.Rollback();
                    return false;
                }
            }

            return true;
        }

        public Feedback GetFeedback(string id)
        {
            Feedback feedback = new Feedback();
            
            try
            {
                //get and set the header with the header items (default values)
                string sqlStatement = "SELECT * FROM feedbacksystem.feedback where FeedbackID = @ID";
                using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
                {
                    cmd.Parameters.AddWithValue("@ID", id);

                    MySqlDataReader reader = cmd.ExecuteReader();
                    string hid = "";

                    if (reader.Read())
                    {
                        hid = reader["HeaderID"].ToString();
                    }
                    reader.Close();
                    feedback.Header = GetHeader(hid);
                    feedback.Header.HeaderItems.Clear();
                    
                    foreach (HeaderItem i in GetHeaderItems(feedback.Header.HeaderId))
                    {
                        feedback.Header.addHeaderItem(i);
                    }

                    cmd.Parameters.Clear();
                }

                //update the header items with the user previous input
                sqlStatement = "SELECT * FROM feedbacksystem.feedbackheader where FeedbackID = @ID";

                using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
                {
                    cmd.Parameters.AddWithValue("@ID", id);

                    MySqlDataReader reader = cmd.ExecuteReader();

                    while (reader.Read())
                    {
                        string headerID = reader["HeaderIID"].ToString();
                        string userInputtedValue = reader["Input"].ToString();
                        //HeaderItem item = feedback.Header.HeaderItems.Find(y => y.Id.Equals(reader["HeaderIID"].ToString()));
                        
                        foreach(HeaderItem hi in feedback.Header.HeaderItems)
                        {
                            if (hi.Id.Equals(headerID))
                            {
                                hi.ValueChosen = userInputtedValue;
                            }
                        }
                    }

                    reader.Close();
                }

                //get and set the sections
                sqlStatement = "SELECT * FROM feedbacksystem.feedbacksection where FeedbackID = @ID";
                using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
                {
                    cmd.Parameters.AddWithValue("@ID", id);

                    MySqlDataReader reader = cmd.ExecuteReader();
                    List<Section> sectionDB = new List<Section>();
                    
                    while (reader.Read())
                    {
                        sectionDB.Add(new Section(reader["SectionID"].ToString(), reader["Comment"].ToString(),
                            reader["CodeGiven"].ToString(), (reader["IsChecked"].ToString().Equals("True") ? true : false) ));
                    }
                    
                    reader.Close();

                    foreach (Section sec in sectionDB)
                    {
                        Section tempSec = GetSection(sec.SectionId);
                        tempSec.Comment = sec.Comment;
                        tempSec.CodeChosen = sec.CodeChosen;
                        tempSec.IsChecked = sec.IsChecked;
                        feedback.Sections.Add(tempSec);
                    }

                    cmd.Parameters.Clear();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }

            return feedback;

        }

        public Template GetTemplate(string id)
        {
            Template template = new FeedBackSystem.Template();

            try
            {
                //get the template details and header id 
                string sqlStatement = "SELECT * FROM feedbacksystem.template where TemplateID = @ID";
                using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
                {
                    cmd.Parameters.AddWithValue("@ID", id);

                    MySqlDataReader reader = cmd.ExecuteReader();
                    string hid = "";

                    if (reader.Read())
                    {
                        hid = reader["HeaderID"].ToString();
                        template.Title = reader["TemplateTitle"].ToString();
                        template.Desc = reader["TemplateDesc"].ToString();
                        //author is not neccessary in this circumstance
                    }
                    reader.Close();
                    template.Header = GetHeader(hid);
                    template.Header.HeaderItems.Clear();

                    foreach (HeaderItem i in GetHeaderItems(template.Header.HeaderId))
                    {
                        template.Header.addHeaderItem(i);
                    }

                    cmd.Parameters.Clear();
                }
                
                //get and set the sections
                sqlStatement = "SELECT * FROM feedbacksystem.template_section where TemplateID = @ID";
                using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
                {
                    cmd.Parameters.AddWithValue("@ID", id);

                    MySqlDataReader reader = cmd.ExecuteReader();
                    List<string> secID = new List<string>();
                    template.Sections = new List<Section>();

                    while (reader.Read())
                    {
                        secID.Add(reader["SectionID"].ToString());
                    }

                    reader.Close();

                    foreach (string sid in secID)
                    {
                        template.Sections.Add(GetSection(sid));
                    }

                    cmd.Parameters.Clear();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }

            return template;
        }

    }
}





