using System.Collections.Generic;
using MySql.Data.MySqlClient;
using System.Windows.Forms;
using System.Data;
using System;
using System.Security.Cryptography;
using System.Text;

namespace FeedBackSystem
{

    class MySql
    {

        private readonly MySqlConnection _connection;

        public MySql()
        {
            const string server = "localhost"; 
            const string database = "feedbacksystem";
            const string user = "root";
            const string password = "1234";

            const string connectionString = "SERVER=" + server + ";" + "DATABASE=" + database + ";" + "UID=" + user + ";" + "PASSWORD=" + password + ";";

            _connection = new MySqlConnection(connectionString);
        }

        public bool OpenConnection()
        {
            try
            {
                _connection.Open();
                return true;
            }
            catch (MySqlException e)
            {
                switch (e.Number)
                {
                    case 0:
                        MessageBox.Show(@"Cannot connect to server. Make sure MySQL is running.");
                        break;
                    case 1045:
                        MessageBox.Show(@"Invalid username/password.");
                        break;
                    default:
                        MessageBox.Show(e.Message);
                        break;
                }
                return false;
            }
        }

        public bool CloseConnection()
        {
            try
            {
                _connection.Close();
                _connection.Dispose();
                return true;
            }
            catch (MySqlException e)
            {
                MessageBox.Show(e.Message);
                return false;
            }
        }

        public MySqlConnection GetConnection()
        {
            return _connection;
        }

        public List<Applicant> GetApplicants()
        {

            List<Applicant> listOfApp = new List<Applicant>();

            MySqlCommand cmd = new MySqlCommand("SELECT FirstName, LastName, Email, positionapplied.File FROM feedbacksystem.applicant, feedbacksystem.positionapplied where applicant.ApplicantID = positionapplied.ApplicantID", _connection);
            MySqlDataReader reader = cmd.ExecuteReader();

            while (reader.Read())
            {
                
                
                byte[] pdf = (byte[])reader["File"];
                Applicant app = new Applicant(reader["FirstName"] + " " + reader["LastName"], reader["Email"] + "", pdf);
                listOfApp.Add(app);
                
            }
            reader.Close();
            return listOfApp;
        }

        // Get the data set generated by the sqlStatement
        public DataTable GetDataSet(string sqlStatement)
        {
            DataTable dataTable = new DataTable();

            try
            {
                MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection);

                using(MySqlDataAdapter da = new MySqlDataAdapter(cmd))
                {
                    da.Fill(dataTable);
                }
            }
            catch (Exception genExp)
            {
                MessageBox.Show(genExp.Message);
            }

            //return the dataTable
            return dataTable;
        }

        //Get datatable from cmd ( use if want to avoid sql injection )
        public DataTable GetDataSetCmd(MySqlCommand cmd)
        {
            DataTable dataTable = new DataTable();
            cmd.Connection = _connection;
            try
            {

                using (MySqlDataAdapter da = new MySqlDataAdapter(cmd))
                {
                    da.Fill(dataTable);
                }
            }
            catch (Exception genExp)
            {
                MessageBox.Show(genExp.Message);
            }

            //return the dataTable
            return dataTable;
        }

        //Get header item list
        public List<string> GetHeaderList(string headerItemId)
        {
            List<string> list = new List<string>();
            DataTable dataTable = new DataTable();
            string sqlStatement = "SELECT headeritemlist.List FROM feedbacksystem.headeritemlist,feedbacksystem.headeritem " +
                           "where headeritemlist.HeaderItemID = headeritem.HeaderItemID and headeritem.HeaderItemID = @HeaderItemID";

            try
            {

                MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection);
                cmd.Parameters.AddWithValue("@HeaderItemID", headerItemId);


                using (MySqlDataAdapter da = new MySqlDataAdapter(cmd))
                {
                    da.Fill(dataTable);
                }

                foreach (DataRow row in dataTable.Rows)
                {
                    list.Add(row["List"].ToString());
                }
            }
            catch (Exception genExp)
            {
                MessageBox.Show(genExp.Message);
            }

            //return the list
            return list;
        }

        public Header GetHeader(string id)
        {
            string sqlStatement = "SELECT * FROM feedbacksystem.header where HeaderID = @HeaderID";
            Header header = new Header();
            try
            {
                MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection);
                cmd.Parameters.AddWithValue("@HeaderID", id);


                MySqlDataReader reader = cmd.ExecuteReader();

                reader.Read();

                header.Title = reader["Name"].ToString();
                header.HeaderID = reader["HeaderID"].ToString();
                header.Desc = reader["Desc"].ToString();
                reader.Close();

            }
            catch (Exception genExp)
            {
                MessageBox.Show(genExp.Message);
            }
            
            return header;
        }

        public List<HeaderItem> GetHeaderItems(string headerId)
        {
            DataTable dataTable = new DataTable();
            List<HeaderItem> headerItem = new List<HeaderItem>();
            string sqlStatement =
                    "SELECT Header.HeaderID,headeritem.HeaderItemID,Title,InputType FROM feedbacksystem.headeritem,feedbacksystem.headercontains," +
                    "feedbacksystem.header where headeritem.HeaderItemID = headercontains.HeaderItemID and " +
                    "headercontains.HeaderID = header.HeaderID and header.HeaderID = @HeaderID";

            try
            {
                MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection);
                cmd.Parameters.AddWithValue("@HeaderID", headerId);

                using (MySqlDataAdapter da = new MySqlDataAdapter(cmd))
                {
                    da.Fill(dataTable);
                }

                foreach (DataRow row in dataTable.Rows)
                {
                    List<string> list = GetHeaderList(row["HeaderItemID"].ToString());

                    if (list.Count > 1)
                    {
                        headerItem.Add(new HeaderItem(row["Title"].ToString(), row["InputType"].ToString(), list));
                    }
                    else
                    {
                        headerItem.Add(new HeaderItem(row["Title"].ToString(), row["InputType"].ToString(), list[0]));
                    }
                }
            }
            catch (Exception genExp)
            {
                MessageBox.Show(genExp.Message);
            }

            //return the HeaderItemList
            return headerItem;
        }

        public bool SaveHeader(Header header)
        {
            string headTitle = header.Title;
            string headDesc = header.Desc;
            List<HeaderItem> itemValues = header.HeaderItems;
            bool success = true;
            

            using (MySqlTransaction trans = _connection.BeginTransaction())
            {
                try
                {
                    string sqlStatement;
                    List<int> itemsId = new List<int>();
                    int headId;
                    string duplicateMsg = "These items are duplicated: ";
                    bool duplicateItem = false;

                    MySqlDataReader reader;

                    sqlStatement = "INSERT INTO header(`Name`,`Desc`) VALUES (@headTitle,@headDesc); SELECT last_insert_id() as id;";
                    using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                    {
                        cmd.Parameters.AddWithValue("@headTitle", headTitle);
                        cmd.Parameters.AddWithValue("@headDesc", headDesc);
                        reader = cmd.ExecuteReader();
                        reader.Read();
                        headId = Convert.ToInt16(reader["id"]);
                        reader.Close();
                        cmd.Parameters.Clear();
                    }

                    foreach (HeaderItem item in itemValues)
                    {
                        int currentItemId = -1;
                        duplicateItem = false;

                        //check whether there is same header item (by name and type)
                        sqlStatement = "SELECT HeaderItemID as id FROM headeritem WHERE Title = @itemTitle AND InputType = @itemInputType";
                        using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                        {
                            cmd.Parameters.AddWithValue("@itemTitle", item.Title);
                            cmd.Parameters.AddWithValue("@itemInputType", item.InputType);
                            reader = cmd.ExecuteReader();
                            if (reader.HasRows)
                            {
                                reader.Read();
                                currentItemId = Convert.ToInt16(reader["id"]);
                                itemsId.Add(currentItemId);
                                duplicateItem = true;
                            }
                            reader.Close();
                            cmd.Parameters.Clear();
                        }

                        if (!duplicateItem)
                        {
                            sqlStatement = "INSERT INTO headeritem(Title, InputType) VALUES (@itemTitle,@itemInputType); SELECT last_insert_id() as id;";
                            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                            {
                                cmd.Parameters.AddWithValue("@itemTitle", item.Title);
                                cmd.Parameters.AddWithValue("@itemInputType", item.InputType);
                                reader = cmd.ExecuteReader();
                                //int id = Convert.ToInt16(cmd.ExecuteScalar().ToString());
                                reader.Read();
                                currentItemId = Convert.ToInt16(reader["id"]);
                                itemsId.Add(currentItemId);
                                reader.Close();
                                cmd.Parameters.Clear();
                            }
                        
                            if (item.InputType.Equals("Query"))
                            {
                                sqlStatement = "INSERT INTO headeritemlist(HeaderItemId, List) VALUES (@currentItemID,@itemQueryStat);";
                                using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                                {
                                    cmd.Parameters.AddWithValue("@currentItemID", currentItemId);
                                    cmd.Parameters.AddWithValue("@itemQueryStat", item.QueryStat);
                                    reader = cmd.ExecuteReader();
                                    reader.Close();
                                    cmd.Parameters.Clear();
                                }
                            }
                            else
                            {
                                foreach (string value in item.ValueItem)
                                {
                                    sqlStatement = "INSERT INTO headeritemlist(HeaderItemId, List) VALUES (@currentItemID,@value); ";
                                    using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                                    {
                                        cmd.Parameters.AddWithValue("@currentItemID", currentItemId);
                                        cmd.Parameters.AddWithValue("@value", value);
                                        reader = cmd.ExecuteReader();
                                        reader.Close();
                                        cmd.Parameters.Clear();
                                    }
                                }
                            }
                        } //end if no duplicate 
                        else
                        {
                            duplicateMsg += "\n" + item.Title;
                        }
                    } //end for each items

                    foreach (int itemids in itemsId)
                    {
                        sqlStatement = "INSERT INTO headercontains(HeaderID,HeaderItemID) VALUES (@headID,@itemID);";
                        using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection, trans))
                        {
                            cmd.Parameters.AddWithValue("@headID", headId);
                            cmd.Parameters.AddWithValue("@itemID", itemids);
                            reader = cmd.ExecuteReader();
                            reader.Close();
                            cmd.Parameters.Clear();
                        }
                    } //end for each header to item

                    if (duplicateItem)
                    {
                        MessageBox.Show(duplicateMsg);
                    }

                    trans.Commit();
                }
                catch (Exception genExp)
                {
                    trans.Rollback();
                    MessageBox.Show(genExp.Message);
                    success = false;
                }
            } //end transaction

            return success;
        }

        public Boolean VerifyPassword(string username, string password)
        {
            SHA256 sha256 = SHA256.Create();

            string sqlStatement = "SELECT concat(TRIM(FirstName),\".\",TRIM(LastName)) as username, reviewer.Password, Salt, ReviewerID FROM feedbacksystem.reviewer where concat(TRIM(FirstName),\".\",TRIM(LastName)) like @Username";

            using (MySqlCommand cmd = new MySqlCommand(sqlStatement, _connection))
            {
                cmd.Parameters.AddWithValue("@Username", username);
                MySqlDataReader reader = cmd.ExecuteReader();
                
                if (reader.Read())
                {
                    byte[] bytes = Encoding.UTF8.GetBytes(password+reader["Salt"]);
                    byte[] hash = sha256.ComputeHash(bytes);
                    string convertedHash = Convert.ToBase64String(hash);
            
                    if (convertedHash.Equals(reader["Password"]))
                    {
                        Reviewer.Id = Convert.ToInt32(reader["ReviewerID"]);
                        Reviewer.Name = reader["username"].ToString().Replace("."," ");
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }

            }

        }
    }
}
